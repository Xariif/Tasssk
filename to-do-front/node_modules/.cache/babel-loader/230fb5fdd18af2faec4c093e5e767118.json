{"ast":null,"code":"var _jsxFileName = \"/Users/jakub/Documents/GitHub/To-Do/to-do-front/src/components/pages/List/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GetLists } from \"../../../services/ToDoService\";\nimport Table from \"./Table/Table\";\nimport Bar from \"./Bar/Bar\";\nimport { useToastContext } from \"../../../context/ToastContext\";\nimport Spinner from \"../../../UI/Spinner\";\nimport useLocalStorage from \"../../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst List = props => {\n  _s();\n\n  const toastRef = useToastContext();\n  const [loading, setLoading] = useState(true);\n  const [selectedList, setSelectedList] = useState();\n  const [lists, setLists] = useState([]);\n  const [listStorage, setListStorage] = useLocalStorage(\"selectedList\");\n\n  function fetchData(par) {\n    setLoading(true);\n    return new Promise((resolve, reject) => {\n      GetLists().then(res => {\n        setLists(res.data);\n\n        if (par === \"new\") {\n          setSelectedList(res.data[res.data.length - 1]);\n          setListStorage(res.data[res.data.length - 1].name);\n        } else if (par === \"del\") {\n          if (res.data.length > 0) {\n            setSelectedList(res.data[0]);\n            setListStorage(res.data[0].name);\n          } else {\n            setSelectedList();\n            setListStorage();\n          }\n        }\n\n        resolve(res.data);\n      }).catch(err => {\n        toastRef.current.show({\n          severity: \"error\",\n          summary: \"Error\",\n          detail: err.message,\n          life: 5000\n        });\n        reject(err);\n      }).finally(() => setLoading(false));\n    });\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ToDoList\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Bar, {\n          fetchData: fetchData,\n          lists: lists,\n          selectedList: selectedList,\n          setSelectedList: setSelectedList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), selectedList && /*#__PURE__*/_jsxDEV(Table, {\n          list: lists.find(x => x.name === selectedList.name),\n          fetchData: fetchData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(List, \"OV3aRNULYa4TI3ie+HLKxyRGqgc=\", false, function () {\n  return [useToastContext, useLocalStorage];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","GetLists","Table","Bar","useToastContext","Spinner","useLocalStorage","List","props","toastRef","loading","setLoading","selectedList","setSelectedList","lists","setLists","listStorage","setListStorage","fetchData","par","Promise","resolve","reject","then","res","data","length","name","catch","err","current","show","severity","summary","detail","message","life","finally","find","x"],"sources":["/Users/jakub/Documents/GitHub/To-Do/to-do-front/src/components/pages/List/List.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GetLists } from \"../../../services/ToDoService\";\nimport Table from \"./Table/Table\";\nimport Bar from \"./Bar/Bar\";\nimport { useToastContext } from \"../../../context/ToastContext\";\nimport Spinner from \"../../../UI/Spinner\";\nimport useLocalStorage from \"../../../hooks/useLocalStorage\";\n\nconst List = (props) => {\n  const toastRef = useToastContext();\n  const [loading, setLoading] = useState(true);\n  const [selectedList, setSelectedList] = useState();\n\n  const [lists, setLists] = useState([]);\n\n  const [listStorage, setListStorage] = useLocalStorage(\"selectedList\");\n\n  function fetchData(par) {\n    setLoading(true);\n\n    return new Promise((resolve, reject) => {\n      GetLists()\n        .then((res) => {\n          setLists(res.data);\n\n          if (par === \"new\") {\n            setSelectedList(res.data[res.data.length - 1]);\n            setListStorage(res.data[res.data.length - 1].name);\n          } else if (par === \"del\") {\n            if (res.data.length > 0) {\n              setSelectedList(res.data[0]);\n              setListStorage(res.data[0].name);\n            } else {\n              setSelectedList();\n              setListStorage();\n            }\n          }\n\n          resolve(res.data);\n        })\n        .catch((err) => {\n          toastRef.current.show({\n            severity: \"error\",\n            summary: \"Error\",\n            detail: err.message,\n            life: 5000,\n          });\n          reject(err);\n        })\n        .finally(() => setLoading(false));\n    });\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <Spinner />;\n  } else {\n    return (\n      <div className=\"ToDoList\">\n        <>\n          <Bar\n            fetchData={fetchData}\n            lists={lists}\n            selectedList={selectedList}\n            setSelectedList={setSelectedList}\n          />\n\n          {selectedList && (\n            <Table\n              list={lists.find((x) => x.name === selectedList.name)}\n              fetchData={fetchData}\n            />\n          )}\n        </>\n      </div>\n    );\n  }\n};\n\nexport default List;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}