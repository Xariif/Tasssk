{"ast":null,"code":"var _jsxFileName = \"/Users/jakub/Documents/GitHub/To-Do/to-do-front/src/components/pages/List/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport { GetListById, GetLists, GetListsNames } from \"../../../services/ToDoService\";\nimport Table from \"./Table/Table\";\nimport Bar from \"./Bar/Bar\";\nimport { useToastContext } from \"../../../context/ToastContext\";\nimport Spinner from \"../../../UI/Spinner\";\nimport useLocalStorage from \"../../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst List = props => {\n  _s();\n\n  const toastRef = useToastContext();\n  const [listStorage, setListStorage] = useLocalStorage(\"selectedList\");\n  const [listNames, setListNames] = useState(null);\n  const [list, setList] = useState(null);\n\n  function getNames() {\n    GetListsNames().then(res => setListNames(prev => res.data)).finally(() => {\n      if (listNames.find(x => x.name === listStorage)) {\n        GetListById(listNames.find(x => x.name === listStorage).id).then(res => setList(prev => res.data)).finally(() => {\n          console.log(listNames.find(x => x.name === listStorage));\n          setSelectedListDropdown(listNames.find(x => x.name === listStorage));\n        });\n      }\n    });\n  }\n\n  useEffect(() => {\n    getNames();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ToDoList\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        listNames: listNames,\n        setListNames: setListNames,\n        list: list,\n        setList: setList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(List, \"9FEtVDi5nsOFCNdIOvfOdgw+xwA=\", false, function () {\n  return [useToastContext, useLocalStorage];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","GetListById","GetLists","GetListsNames","Table","Bar","useToastContext","Spinner","useLocalStorage","List","props","toastRef","listStorage","setListStorage","listNames","setListNames","list","setList","getNames","then","res","prev","data","finally","find","x","name","id","console","log","setSelectedListDropdown"],"sources":["/Users/jakub/Documents/GitHub/To-Do/to-do-front/src/components/pages/List/List.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport {\n  GetListById,\n  GetLists,\n  GetListsNames,\n} from \"../../../services/ToDoService\";\nimport Table from \"./Table/Table\";\nimport Bar from \"./Bar/Bar\";\nimport { useToastContext } from \"../../../context/ToastContext\";\nimport Spinner from \"../../../UI/Spinner\";\nimport useLocalStorage from \"../../../hooks/useLocalStorage\";\n\nconst List = (props) => {\n  const toastRef = useToastContext();\n\n  const [listStorage, setListStorage] = useLocalStorage(\"selectedList\");\n\n  const [listNames, setListNames] = useState(null);\n  const [list, setList] = useState(null);\n\n  function getNames() {\n    GetListsNames()\n      .then((res) => setListNames((prev) => res.data))\n      .finally(() => {\n        if (listNames.find((x) => x.name === listStorage)) {\n          GetListById(listNames.find((x) => x.name === listStorage).id)\n            .then((res) => setList((prev) => res.data))\n            .finally(() => {\n              console.log(listNames.find((x) => x.name === listStorage));\n              setSelectedListDropdown(\n                listNames.find((x) => x.name === listStorage)\n              );\n            });\n        }\n      });\n  }\n\n  useEffect(() => {\n    getNames();\n  }, []);\n\n  return (\n    <div className=\"ToDoList\">\n      <>\n        <Bar\n          listNames={listNames}\n          setListNames={setListNames}\n          list={list}\n          setList={setList}\n        />\n      </>\n    </div>\n  );\n};\n\nexport default List;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SACEC,WADF,EAEEC,QAFF,EAGEC,aAHF,QAIO,+BAJP;AAKA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;EAAA;;EACtB,MAAMC,QAAQ,GAAGL,eAAe,EAAhC;EAEA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCL,eAAe,CAAC,cAAD,CAArD;EAEA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,IAAD,CAAhC;;EAEA,SAASoB,QAAT,GAAoB;IAClBf,aAAa,GACVgB,IADH,CACSC,GAAD,IAASL,YAAY,CAAEM,IAAD,IAAUD,GAAG,CAACE,IAAf,CAD7B,EAEGC,OAFH,CAEW,MAAM;MACb,IAAIT,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWd,WAAjC,CAAJ,EAAmD;QACjDX,WAAW,CAACa,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWd,WAAjC,EAA8Ce,EAA/C,CAAX,CACGR,IADH,CACSC,GAAD,IAASH,OAAO,CAAEI,IAAD,IAAUD,GAAG,CAACE,IAAf,CADxB,EAEGC,OAFH,CAEW,MAAM;UACbK,OAAO,CAACC,GAAR,CAAYf,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWd,WAAjC,CAAZ;UACAkB,uBAAuB,CACrBhB,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWd,WAAjC,CADqB,CAAvB;QAGD,CAPH;MAQD;IACF,CAbH;EAcD;;EAEDb,SAAS,CAAC,MAAM;IACdmB,QAAQ;EACT,CAFQ,EAEN,EAFM,CAAT;EAIA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,uBACE;MAAA,uBACE,QAAC,GAAD;QACE,SAAS,EAAEJ,SADb;QAEE,YAAY,EAAEC,YAFhB;QAGE,IAAI,EAAEC,IAHR;QAIE,OAAO,EAAEC;MAJX;QAAA;QAAA;QAAA;MAAA;IADF;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAzCD;;GAAMR,I;UACaH,e,EAEqBE,e;;;KAHlCC,I;AA2CN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}